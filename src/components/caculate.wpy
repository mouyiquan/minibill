<template lang="wxml">
  <view class="caculation" hidden="{{ !showCaculation }}">
    <view class="screen" wx:if="{{ showScreen }}">
      <view class="fs21">{{ amount }}</view>
      <view class="fs12" wx:if="{{ showFormula }}">{{ formula }}</view>
    </view>
    <view class="hide-caculation" @tap="hideCaculation">
      <image src="../public/images/down.png"></image>
    </view>

    <view class="btn-list">
      <view class="btn-left">
        <view class="btnGroup">
          <view class="caculate-item" data-num="7" @tap="caculatBtn">7</view>
          <view class="caculate-item" data-num="8" @tap="caculatBtn">8</view>
          <view class="caculate-item" data-num="9" @tap="caculatBtn">9</view>
        </view>

        <view class="btnGroup">
          <view class="caculate-item" data-num="4" @tap="caculatBtn">4</view>
          <view class="caculate-item" data-num="5" @tap="caculatBtn">5</view>
          <view class="caculate-item" data-num="6" @tap="caculatBtn">6</view>
        </view>

        <view class="btnGroup">
          <view class="caculate-item" data-num="1" @tap="caculatBtn">1</view>
          <view class="caculate-item" data-num="2" @tap="caculatBtn">2</view>
          <view class="caculate-item" data-num="3" @tap="caculatBtn">3</view>
        </view>

        <view class="btnGroup">
          <view class="caculate-item" @tap="resetData">C</view> 
          <view class="caculate-item" data-num="0" @tap="caculatBtn">0</view>
          <view class="caculate-item backspace" @tap="backspace">
            <image class="caculate-back" src="../public/images/caculate-back.png"></image>
          </view>
        </view>
      </view>
      <view class="btn-right">
        <view class="caculate-item" data-num="minus" @tap="caculatBtn">-</view>
        <view class="caculate-item" data-num="plus" @tap="caculatBtn">+</view>
        <view class="caculate-item ok" @tap="caculatok">OK</view>
      </view>
    </view>
  </view>
</template>

<script>
// 计算器组件（暂时已弃用）
import wepy from 'wepy';
export default class Caculate extends wepy.component {
    props = {
      showCaculation: {
        type: Boolean,
        default: false,
        twoWay: true
      },
      showFormula: {
        type: Boolean,
        default: true
      },
      showScreen: {
        type: Boolean,
        default: false
      },
      amount: {
        type: String,
        default: '0',
        twoWay: true
      }
    }

    data = {
      formula: '',
      op: {
        'plus': '+',
        'minus': '-',
      },
      opArr: ['+', '-'],
      infix: [],
      suffix: [],
      lastVal: 0
    };

    methods = {
      hideCaculation () {
        this.showCaculation = false
      },
      caculatBtn(event) {
        let value = event.target.dataset.num;
        let number = parseInt(value, 10)
        if (!isNaN(number)) {
          this.buildNumberInfix(number)
          this.calculate()
        } else {
          this.buildOpInfix(this.op[value]);
        }
      },
      backspace () {
        let result = parseInt(this.amount, 10).toString()
        let newResult = result.split('')
        if (newResult.length == 1) {
          this.resetData()
          return 
        } else {
          let money = result.substr(0, result.length - 1)
          this.lastVal = money
          this.infix = [parseInt(money, 10)]
        }
        this.calculate()
      },
      caculatok() {
        this.resetData(false)
        this.showCaculation = false
        this.$emit('invokeCaculation', this.amount)
      }
    };

    // 计算器的方法
    resetData (resetAmount = true) {
      this.infix = []
      this.suffix = []
      this.lastVal = 0
      this.formula = ''
      if (resetAmount) this.amount = '0.00'
    }

    isOp (op) {
      return op && this.opArr.indexOf(op) !== -1;
    }

    priorHigher (a, b) {
      return (a === '+' || a === '-') && (b === '*' || b === '/');
    }

    opCalc (b, op, a) {
      a = parseInt(a, 10)
      b = parseInt(b, 10)
      switch(op) {
        case '+':
          return a + b;
        case '-':
          return Math.max(0, (a - b));
        default:
          return 0;
      }
    }

    // 1 ~ 9 的中缀构建
    buildNumberInfix (val) {
      if(!this.isOp(this.lastVal)) {
        val = this.lastVal * 10 + val
        this.infix.pop()
      }
      this.lastVal = val
      this.infix.push(val)
    }

    // +、- 的中缀构建
    buildOpInfix (op) {
      if(this.infix.length == 0) {
        this.infix.push(parseInt(this.amount, 10))
      }
      if (this.isOp(this.lastVal)) {
        this.infix.pop()
      }
      this.lastVal = op
      this.infix.push(op)
    }

    calculate (type) {
      if (this.infix.length % 2 == 0 && this.infix.length != 1) {
        return
      }
      this.infix2Suffix()
      this.calcSuffix()
    }

    // 计算后缀表达式
    calcSuffix () {
      let result = [];
      for (var i = 0; i < this.suffix.length; i++) {
        if (!this.isOp(this.suffix[i])) {
          result.push(this.suffix[i])
        } else {
          result.push(this.opCalc(result.pop(), this.suffix[i], result.pop()))
        }
      }
      this.amount = result.length == 0 ? '0.00' : `${result[0]}.00`
    }

    // 中缀表达式转后缀
    infix2Suffix () {
      let temp = []
      this.suffix = []
      for (let i = 0; i < this.infix.length; i++) {
        if (!this.isOp(this.infix[i])) {
          this.suffix.push(this.infix[i])
        }
        else {
          if (!temp.length) {
            temp.push(this.infix[i])
          } else {
            let opTop = temp[temp.length - 1]
            if (!this.priorHigher(opTop, this.infix[i])) {
              while (temp.length && !this.priorHigher(opTop, this.infix[i])) {
                this.suffix.push(temp.pop())
                opTop = temp[temp.length - 1]
              }
            }
            // 将当前运算符也压入后缀表达式
            temp.push(this.infix[i])
          }
        }
      }
      // 将剩余运算符号压入
      while (temp.length) {
        this.suffix.push(temp.pop())
      }
    }

    
}
</script>

<style lang="less">
@itemBg: #F5F5F5;
@borderBg: #DCDCDC;
.caculation {
  position:fixed;
  bottom:0;
  left:0;
  width:100%;
  z-index:666;
  .screen {
    padding:12rpx 20rpx;
    color:white;
    text-align:right;
    background:rgba(62,64,82,0.9);
  }
}
.caculation .close {
  width:70rpx;
  position:absolute;
  right:0;
  top:-52rpx;
  text-align:center;
  background:#efefef;
  border:2rpx solid #ccc;
  height:50rpx;
}
.caculation .close image {
	width:40rpx;
	height:50rpx;
	display:inline-block;
}
.caculation .btnGroup {
	display:flex;
	flex-direction:row;
	border-top: 2rpx solid @borderBg;
}
.caculate-item {
	text-align:center;
	flex: 1;
  height:120rpx;
  line-height: 120rpx;
	background:@itemBg;
	border-left:2rpx solid @borderBg;
  color:black;
  font-size: 48rpx;
}
.caculate-back {
	width:60rpx;
	height:60rpx;
	position:absolute;
	left:0;
	right:0;
	top:0;
	bottom:0;
	margin:auto;
}
.caculate-item:first-child {
	border-left:none;
}
.backspace {
	position:relative;
}
.hide-caculation {
  background: @itemBg;
  height: 70rpx;
  line-height:90rpx;
  text-align: center;
  vertical-align: center;
  border-top: 1px solid @borderBg;
  image {
    width: 70rpx;
    height: 50rpx;
  }
}
.btn-list {
  display: flex;
  .btn-left {
    width: 75%;
  }
  .btn-right {
    width: 25%;
    display: flex;
    flex-direction: column;
    > view {
      width: 100%;
    }
    .caculate-item {
      border-left:2rpx solid #DCDCDC;
      border-top:2rpx solid #DCDCDC;
    }
    .caculate-item.ok {
      height: 243rpx;
      line-height: 243rpx;
      border-top:2rpx solid #DCDCDC;
    }
  }
  
}
</style>