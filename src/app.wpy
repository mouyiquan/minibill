<script>
import wepy from 'wepy'
import 'wepy-async-function'
import { setStore, getStore } from 'wepy-redux'
import configStore from './store'
import { asyncList } from '@/store/actions'
import wxRequest from '@/utils/wxRequest'
import Session from '@/utils/session'
setStore(configStore())

export default class extends wepy.app {
  config = {
    pages: [
      "pages/index",
      "pages/chart",
      "pages/asset",
      "pages/setting",

      // 记一笔
      "pages/statements/create",  //新增
      "pages/statements/edit",    //编辑
      "pages/statements/detail",  //详情
      "pages/statements/chose_category",  //选择账单分类
      "pages/statements/chose_asset",    //选择账户
      "pages/statements/filter_statements",  //账单列表

      // 余额设置
      "pages/forms/asset_form",  //余额修改值
      "pages/forms/budget_form", //预算修改值
      "pages/forms/icons_chose", //图标选择

      // 预算
      "pages/budgets/budget",  //大类预算管理
      "pages/budgets/child_budget",  //子类预算管理

      // 设置
      "pages/settings/feedback",  //反馈和意见
      "pages/settings/header",   //首页看板设置
      "pages/settings/super_chart",  //消费报表
      "pages/settings/user_info", //个人信息
      "pages/settings/nickname_edit",  //昵称设置
      "pages/settings/prepare_buy",    //预购清单
      "pages/settings/super_statement", //超级账单
      "pages/settings/about",          //关于学会记账
      "pages/settings/search",        //搜索中心
      "pages/settings/account_book",  //账本列表

      // 账单墙
      "pages/statements/images",    //账单图库

      // 编辑账单类型分类/资产分类
      "pages/categories/list",    //支出、收入分类管理
      "pages/categories/child",   //支出、收入子分类管理
      "pages/categories/category_form",   //分类表单
      "pages/categories/category_statement",    //分类账单统计 根据月份
      "pages/assets/list",      //资产列表
      "pages/assets/asset_form",      //资产表单
      "pages/assets/asset_detail",    //消费详情

      // 消息
      "pages/message",        //消息中心
      "pages/message/detail",   //详细消息

      // 月账单
      "pages/months/index",

      // 好友
      "pages/friends/index",
      "pages/friends/search"
    ],
    window: {
      "backgroundColor": "#efefef",
      "navigationBarBackgroundColor": "#ffffff",
      "navigationBarTextStyle": "black",
      "backgroundTextStyle": "light",
      "navigationBarTitleText": "习惯记账",
      // navigationBarTextStyle: "white",
      "enablePullDownRefresh": false
    },
    tabBar: {
      backgroundColor: "#fff",
      color: "#000000",
      selectedColor: "#2196F3",
      list: [
        {
          pagePath: "pages/index",
          iconPath: "public/images/settings/statement.png",
          selectedIconPath: "public/images/settings/statement-active.png",
          text: "首页"
        },
        {
          pagePath: "pages/chart",
          iconPath: "public/images/settings/statistic.png",
          selectedIconPath: "public/images/settings/statistic-active.png",
          text: "统计"
        },
        {
          pagePath: "pages/asset",
          iconPath: "public/images/settings/asset.png",
          selectedIconPath: "public/images/settings/asset-active.png",
          text: "资产"
        },
        {
          pagePath: "pages/setting",
          iconPath: "public/images/settings/user_1.png",
          selectedIconPath: "public/images/settings/user_1-active.png",
          text: "我的"
        }
      ]
    },
    networkTimeout: {
      request: 100000,
      downloadFile: 100000
    },
    permission: {
      "scope.userLocation": {
        "desc": "您的位置信息将用于记录账单的地理位置"
      }
    },
    debug: false,
    "plugins": {
      "calendar": {
        "version": "1.1.3",
        "provider": "wx92c68dae5a8bb046"
      }
    }
  }

  globalData = {
    user: {}
  }

  onLaunch () {
    this.getUser()
    // this.checkVersionUpdate()
    this.uploadData()
  }

  // 预加载用户
  async getUser() {
    const data = await wxRequest.Get('users')
    if (typeof data !== 'undefined') {
      this.globalData.user = data
    }
  }

  // 检查更新
  checkVersionUpdate() {
    if (!wx.canIUse('getUpdateManager')) {
      return false
    }

    wxRequest.WX('check_update', {}, (res) => {
      const data = res.data
      if (data === 0) return false
      const updateManager = wx.getUpdateManager()
      updateManager.onCheckForUpdate(function (res) {
        if (res.hasUpdate) {
          updateManager.onUpdateReady(function () {
            wx.showModal({
              title: '更新提示',
              content: '新版本已经准备好，请重启应用',
              success: function (res) {
                if (res.confirm) {
                  // 新的版本已经下载好，调用 applyUpdate 应用新版本并重启
                  updateManager.applyUpdate()
                }
              }
            })
          })
          updateManager.onUpdateFailed(function () {
            // 新的版本下载失败
            wx.showModal({
              title: '已经有新版本了哟~',
              content: '新版本下载失败，请关闭微信后重新打开即可'
            })
          })
        }
      })
    })
  }

  uploadData() {
    // 记录请求错误的日志
    let errs = Session.getErrors()
    if (!!errs && errs.length > 0) {
      for(let index = 0, length = errs.length; index < length; ++index) {
        const err = errs[index]
        wxRequest.PostBasic(`error_upload`, {err: err}, {}, () => {
          errs.splice(errs.indexOf(err), 1)
          Session.set(Session.key['errorKey'], errs)
        })
      }
    }

    // 同步本地数据到远程服务端
    let statements = Session.getStatements()
    if (!!statements && statements.length > 0) {
      for(let index = 0, length = statements.length; index < length; ++index) {
        const statement = statements[index]
        wxRequest.PostBasic(`statements`, statement, {}, () => {
          statements.splice(statements.indexOf(statement), 1)
          Session.set(Session.key['localStatementKey'], statements)
        })
      }
    }
  }

  constructor () {
    super()
    this.use('requestfix')
    this.use('promisify')

    this.intercept('request', {
      config (p) {
        return p;
      },
      success (p) {
        return p;
      }
    });
  }
}
</script>
<style lang="less">
@import "/public/styles/iconfont.wxss";
@import "/public/styles/common.less";
</style>
